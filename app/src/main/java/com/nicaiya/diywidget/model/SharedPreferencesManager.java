package com.nicaiya.diywidget.model;

/**
 * Generated by smali2java 1.0.0.558
 * Copyright (C) 2013 Hensence.com
 */


import android.content.Context;
import android.content.SharedPreferences;

import com.nicaiya.diywidget.DiyWidgetApplication;
import com.nicaiya.diywidget.database.ConfigDataBase;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.HashMap;
import java.util.List;
import java.util.Map;


public class SharedPreferencesManager {

    public static final int currentDefaultFileVersion = 2;
    public static int defaultFileVersion = -1;

    public static boolean IsStartDataMoveToDataBase = false;

    private SharedPreferences pref;
    private SharedPreferences.Editor prefEditor;
    private static Map<String, String> cacheWidgetDataMap = new HashMap<>();
    private static List<String> widgetDataNameList = new ArrayList<>();
    private static SharedPreferencesManager instance = null;

    public static SharedPreferencesManager getInstance(Context context) {
        if (instance == null) {
            synchronized (SharedPreferencesManager.class) {
                if (instance == null) {
                    instance = new SharedPreferencesManager(context);
                }
            }
        }
        return instance;
    }


    private SharedPreferencesManager(Context context) {
        pref = context.getSharedPreferences("storage", 0x0);
        prefEditor = pref.edit();
        loadNameList();
        IsStartDataMoveToDataBase = true;
        ConfigDataBase db = DiyWidgetApplication.getInstance().getConfigDataBase();
        int battery = getBatteryLevel();
        if (battery != 0) {
            db.saveBatteryLevel(battery);
        }
    }

    private void loadNameList() {
        String str = pref.getString("NameList", "*&!)~");
        String[] names = str.split(",");
        int count = names.length;
        widgetDataNameList.clear();
        if (str.equals("")) {
            return;
        }
        for (int i = 0x0; i < count; i = i + 0x1) {
            widgetDataNameList.add(names[i]);
        }
    }

    private void saveNameList() {
        int count = widgetDataNameList.size();
        String str = null;
        for (int i = 0; i < count; i++) {
            str = str + widgetDataNameList.get(i) + ",";
        }
        cacheWidgetDataMap.put("NameList", str);
        prefEditor.putString("NameList", str);
        prefEditor.commit();
    }

    public List getWidgetDataNameList() {
        return widgetDataNameList;
    }

    public ConfigFileData getWidgetDataConfigFileData(String name) {
        String xml = null;
        if (cacheWidgetDataMap.containsKey(name)) {
            xml = cacheWidgetDataMap.get(name);
        }
        if (xml == null) {
            xml = pref.getString(name, "*&!)~");
            if ("*&!)~".equals(xml)) {
                xml = null;
            } else {
                cacheWidgetDataMap.put(name, xml);
            }
        }
        if (xml == null) {
            return null;
        }
        ConfigFileData configFileData = new ConfigFileData();
        configFileData.setXmlByteArray(xml.getBytes());
        configFileData.setXmlAppFileVersion();
        return configFileData;
    }

    public void setWidgetDataXML(ConfigFileData configFileData) {
        // String name = WidgetData.getNameFromConfigFileData(configFileData);
        //  setWidgetDataXML(name, configFileData);
    }

    public void setWidgetDataXML(String name, ConfigFileData configFileData) {
        byte[] data = configFileData.getXmlByteArray();
        String xml = new String(data);
        if (!widgetDataNameList.contains(name)) {
            widgetDataNameList.add(0x0, name);
            saveNameList();
        }
        cacheWidgetDataMap.put(name, xml);
        prefEditor.putString(name, xml);
        prefEditor.commit();
    }

    public void removeWidgetDataXML(String name) {
        widgetDataNameList.remove(name);
        saveNameList();
        cacheWidgetDataMap.remove(name);
        prefEditor.remove(name);
        prefEditor.commit();
    }

    private String getWidgetIdKey(int appWidgetId) {
        return "&$@$^," + appWidgetId;
    }

    public void setWidgetIdAndDataName(int appWidgetId, String name) {
        prefEditor.putString(getWidgetIdKey(appWidgetId), name);
        prefEditor.commit();
    }

    public void removeWidgetId(int appWidgetId) {
        prefEditor.remove(getWidgetIdKey(appWidgetId));
        prefEditor.commit();
    }

    private String getWidgetDataName(int appWidgetId) {
        String name = pref.getString(getWidgetIdKey(appWidgetId), "*&!)~");
        if (!name.equals("*&!)~")) {
            return name;
        }
        return name;
    }

    public ConfigFileData getWidgetDataXML(int appWidgetId) {
        return getWidgetDataConfigFileData(getWidgetDataName(appWidgetId));
    }

    public void setBatteryLevel(int batteryLevel) {
        prefEditor.putInt("batteryLevel", batteryLevel);
        prefEditor.commit();
    }

    public int getBatteryLevel() {
        int batteryLevel = pref.getInt("batteryLevel", -0x1);
        if (batteryLevel != -0x1) {
            return batteryLevel;
        }
        return batteryLevel;
    }

    public void setlauncherDownloadPopupTime(Calendar calender) {
        if (prefEditor == null) {
            prefEditor = pref.edit();
        }
        prefEditor.putLong("launcherDownloadPopupTime", calender.getTimeInMillis());
        prefEditor.commit();
    }

    public Calendar getlauncherDownloadPopupTime() {
        long timeInMillis = pref.getLong("launcherDownloadPopupTime", -1);
        if (timeInMillis != -1) {
            Calendar calender = Calendar.getInstance();
            calender.setTimeInMillis(timeInMillis);
            return calender;
        }
        return null;
    }

    public void setUpdatePopupTime(Calendar calender) {
        if (prefEditor == null) {
            prefEditor = pref.edit();
        }
        prefEditor.putLong("widgetUpdateCheckPopupTime", calender.getTimeInMillis());
        prefEditor.commit();
    }

    public Calendar getUpdatePopupTime() {
        long timeInMillis = pref.getLong("widgetUpdateCheckPopupTime", -1);
        if (timeInMillis != -1) {
            Calendar calender = Calendar.getInstance();
            calender.setTimeInMillis(timeInMillis);
            return calender;
        }
        return null;
    }

    public void setUpdateFlurryForActiveUserTime(Calendar calender) {
        if (prefEditor == null) {
            prefEditor = pref.edit();
        }
        prefEditor.putLong("activeWidgetUserTime", calender.getTimeInMillis());
        prefEditor.commit();
    }

    public Calendar getUpdateFlurryForActiveUserTime() {
        long timeInMillis = pref.getLong("activeWidgetUserTime", -1);
        if (timeInMillis != -1) {
            Calendar calender = Calendar.getInstance();
            calender.setTimeInMillis(timeInMillis);
            return calender;
        }
        return null;
    }

    public void setLauncherInstallationInfoSendTime(Calendar calender) {
        if (prefEditor == null) {
            prefEditor = pref.edit();
        }
        prefEditor.putLong("launcherInstallationInfoSendTime", calender.getTimeInMillis());
        prefEditor.commit();
    }

    public Calendar getLauncherInstallationInfoSendTime() {
        long timeInMillis = pref.getLong("launcherInstallationInfoSendTime", -1);
        if (timeInMillis != -1) {
            Calendar calender = Calendar.getInstance();
            calender.setTimeInMillis(timeInMillis);
            return calender;
        }
        return null;
    }

    public void setWidgetClick(int widgetId, boolean click) {
        if (prefEditor == null) {
            prefEditor = pref.edit();
        }
        prefEditor.putBoolean("widgetFirstClick" + String.valueOf(widgetId), click);
        prefEditor.commit();
    }

    public boolean getWidgetClick(int widgetId) {
        return pref.getBoolean("widgetFirstClick" + String.valueOf(widgetId), false);
    }

    public void removeWidgetClick(int widgetId) {
        setWidgetClick(widgetId, false);
        prefEditor.remove("widgetFirstClick" + String.valueOf(widgetId));
        prefEditor.commit();
    }

    public void setUpdateNotiShow() {
        if (prefEditor == null) {
            prefEditor = pref.edit();
        }
        prefEditor.putBoolean("widgetUpdateNoti", false);
        prefEditor.commit();
    }

    public boolean getUpdateNotiShow() {
        return pref.getBoolean("widgetUpdateNoti", true);
    }

    public void setAddObjectMessageShow(String type, Boolean val) {
        if (prefEditor == null) {
            prefEditor = pref.edit();
        }
        prefEditor.putBoolean("addObjectMessageShow" + type, val.booleanValue());
        prefEditor.commit();
    }

    public boolean getAddObjectMessageShow(String type) {
        return pref.getBoolean("addObjectMessageShow" + type, true);
    }

    public void setAlbum(String packageName, String info) {
        if (prefEditor == null) {
            prefEditor = pref.edit();
        }
        prefEditor.putString("musicAlbumTitle" + packageName, info);
        prefEditor.commit();
    }

    public String getAlbum(String packageName, String defaultInfo) {
        return pref.getString("musicAlbumTitle" + packageName, defaultInfo);
    }

    public void setArtist(String packageName, String info) {
        if (prefEditor == null) {
            prefEditor = pref.edit();
        }
        prefEditor.putString("musicArtist" + packageName, info);
        prefEditor.commit();
    }

    public String getArtist(String packageName, String defaultInfo) {
        return pref.getString("musicArtist" + packageName, defaultInfo);
    }

    public void setTrack(String packageName, String info) {
        if (prefEditor == null) {
            prefEditor = pref.edit();
        }
        prefEditor.putString("musicSongTitle" + packageName, info);
        prefEditor.commit();
    }

    public String getTrack(String packageName, String defaultInfo) {
        return pref.getString("musicSongTitle" + packageName, defaultInfo);
    }

    public void setPlayStatus(String packageName, boolean click) {
        if (prefEditor == null) {
            prefEditor = pref.edit();
        }
        prefEditor.putBoolean("musicPlayPause" + packageName, click);
        prefEditor.commit();
    }

    public boolean getPlayStatus(String packageName) {
        return pref.getBoolean("musicPlayPause" + packageName, false);
    }

    public void setFirstPlayStatus(String packageName) {
        if (prefEditor == null) {
            prefEditor = pref.edit();
        }
        prefEditor.putBoolean("musicFirstPlayPause" + packageName, false);
        prefEditor.commit();
    }

    public boolean getFirstPlayStatus(String packageName) {
        return pref.getBoolean("musicFirstPlayPause" + packageName, true);
    }

    public int getCurrentDefaultFileVersion() {
        return pref.getInt("defaultFileVer", 2);
    }

    public void setNextDefaultFileVersion() {
        prefEditor = pref.edit();
        prefEditor.putInt("defaultFileVer", 3);
        prefEditor.commit();
    }

    public void setMusicAlbumCoverMessageShow(Boolean val) {
        if (prefEditor == null) {
            prefEditor = pref.edit();
        }
        prefEditor.putBoolean("musicAlbumCoverMessageEdit", val.booleanValue());
        prefEditor.commit();
    }

    public boolean getMusicAlbumCoverMessageShow() {
        return pref.getBoolean("musicAlbumCoverMessageEdit", true);
    }

    public void setLastPlayer(String playerName) {
        if (prefEditor == null) {
            prefEditor = pref.edit();
        }
        prefEditor.putString("musicLastPlayer", playerName);
        prefEditor.commit();
    }

    public String getLastPlayer() {
        return pref.getString("musicLastPlayer", "");
    }

    public void setVersion(int version) {
        prefEditor = pref.edit();
        prefEditor.putInt("appVersion", version);
        prefEditor.commit();
    }

    public int getVersion() {
        int version = pref.getInt("appVersion", -0x1);
        if (version != -0x1) {
            return version;
        }
        return version;
    }

    public void setGcmId(String gcmId) {
        prefEditor = pref.edit();
        prefEditor.putString("gcmId", gcmId);
        prefEditor.commit();
    }

    public String getGcmId() {
        return pref.getString("gcmId", "*&!)~");
    }

    public void setDefaultLauncherPackageName(String packageName) {
        prefEditor = pref.edit();
        prefEditor.putString("default_launcher_package", packageName);
        prefEditor.commit();
    }

    public String getDefaultLauncherPackageName() {
        return pref.getString("default_launcher_package", "*&!)~");
    }
}
